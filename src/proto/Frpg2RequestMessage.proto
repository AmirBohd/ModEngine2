/* All messages are as From Soft named them in DkS3 unless stated otherwise */

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

import public "proto/Frpg2PlayerData.proto";

package Frpg2RequestMessage;

message RequestQueryLoginServerInfo{
  required string steamid = 1;
  optional string unknownfield = 2; // Unknown field. Definetly a string as parsed through the same function as the steamid variable
  required int64 versionnum = 3;
}

message RequestQueryLoginServerInfoResponse{
  required int64 port = 1;
  required string serverip = 2;
}

message RequestHandshake{
  required string aescwckey = 1;
}

message RequestHandshakeResponse{
}

message GetServiceStatus{
  required int64 id = 1;
  required string steamid = 2;
  optional string unknownfield = 3; // Definetly a string as parsed through the same function as the steamid variable
  required int64 versionnum = 4;
}

message GetServiceStatusResponse{
  required int64 id = 1;
  required string steamid = 2;
  required int64 unknownfield = 3;
  required int64 versionnum = 4;
}

message RequestGetAnnounceMessageListResponse{
  required AnnounceMessageDataList changes = 1;
  required AnnounceMessageDataList notices = 2;
}

message AnnounceMessageDataList{
  repeated AnnounceMessageData items = 1;
}

message AnnounceMessageData{
  required uint32 unk01 = 1;
  required uint32 order = 2;
  required uint32 unk03 = 3;
  required string header = 4;
  required string message = 5;
  required Frpg2PlayerData.DateTime datetime = 6;
}

message RequestUpdatePlayerStatus{
	required Frpg2PlayerData.AllStatus allstatus = 1;
}

/* Summon sign messages */

message RequestGetSignList{
  required uint32 unknownid1 = 1; // 0
  repeated SignDomainGetInfo signdomaingetinfo = 2;
  required uint32 onlineareaid = 3; //Seems to be related to online area
  required MatchingParameter matchingparameter = 4;
  required SignGetFlags signgetflags = 5;
}

message RequestGetSignListResponse{
  required GetSignResult getsignresult = 1;
}

message SummonSignMessage{
  required uint32 onlineareaid = 1;
  required uint32 unknownid2 = 2;
  required SignInfo signinfo = 3;
  required string playerstruct = 4;
}

message GetSignResult{
  optional SignInfo signinfo = 1;
  repeated SignData signdata = 2;
}

message SignInfo{
  required uint32 playerid = 1;
  required uint32 signinfo = 2;
}

message SignData{
  required SignInfo signinfo = 1;
  required uint32 onlineareaid = 2;
  required MatchingParameter matchingparameter = 3;
  required string playerstruct = 4;
  required string steamid = 5;
  required uint32 unknownid6 = 6; //1
}

message RequestNotifyCreateSignResult{
	required Frpg2PlayerData.AllStatus allstatus = 1;
	required uint32 onlineareaidlower = 2;
	required uint32 onlineareaidupper = 3;
	required Frpg2PlayerData.Vector vector = 4;
	required uint32 signuniquenumber = 5; //528745087
	required uint32 unknown2 = 6; //0
	required uint32 unknown3 = 7; //3
	required uint32 unknown4 = 8; //2
}

message MatchingParameter{
  required uint32 unknownid1 = 1; //1350000
  required uint32 unknownid2 = 2; //2
  required uint32 unknownid3 = 3; //0
  required uint32 unknownid4 = 4; //1
  required uint32 unknownid5 = 5; //0
  required uint32 soullevel = 6;
  required uint32 totalgetsoul = 7;
  optional string unknownstring = 8;
  required uint32 unknownid9 = 9; //0, 1, 7
  required string password = 10;
  required uint32 covenant = 11;
  required uint32 weaponlevel = 14;
}

message SignGetFlags{
  required uint32 unknownid1 = 1; //1
  required uint32 unknownid2 = 2; //1
  required uint32 unknownid3 = 3; //0
}

message SignDomainGetInfo{
  required uint32 unknownfield1 = 1; //32
  required uint32 onlineareaid = 2;
}

message RequestCreateSign{
  required uint32 onlineareaidlower = 1;
  required uint32 onlineareaidupper = 2;
  required MatchingParameter matchingparameter = 3;
  required uint32 unknown = 4;
  required string playerstruct = 5;
}

message RequestCreateSignResponse{
  required uint32 signuniquenumber = 1;
}

message RequestSummonSign{
  required uint32 onlineareaidlower = 1;
  required uint32 onlineareaidupper = 2;
  required SignInfo signinfo = 3;
  required string playerstruct = 4;
}

message PushRequestRemoveSign{
  required uint32 signuniquenumber = 1;
  required SignInfo signinfo = 2;
}


message PushRequestSummonSign{
  required uint32 signuniquenumber = 1;
  required SummonSignMessage summonsignmessage = 2;
}

message RequestRemoveSign{
  required uint32 signuniquenumber = 1;
}

message RequestCreateGhostData{
  required uint32 onlineareaid = 1;
  required string ghostdata = 2;
}

message RequestGetRightMatchingArea{
  required MatchingParameter matchingparameter = 1;
  required uint32 unknown = 2;
}

message RequestGetRightMatchingAreaResponse{
  repeated RequestGetRightMatchingAreaResponse_Area_info areainfo = 1;
}

message RequestGetRightMatchingAreaResponse_Area_info{
  required uint32 onlineareaid = 1;
  required uint32 unknown = 2;
}

/* BreakIn Messages */

message RequestGetBreakInTargetList{ //Sent by invader looking for worlds to invade
	required uint32 onlineareaidlower = 1;
	required uint32 onlineareaidupper = 2;
	required uint32 unknown1 = 3;
	required MatchingParameter matchingparameter = 4;
	required uint32 unknown2 = 5;
}

message RequestGetBreakInTargetListResponse{ //Received by invader looking for worlds to invade
	required uint32 onlineareaidlower = 1;
	required uint32 onlineareaidupper = 2;
	repeated BreakInTargetData breakintargetdata = 3;
}

message BreakInTargetData{
	required uint32 playerid = 1;
	required string steamid = 2;
}

message PushRequestAllowBreakInTarget{ //Received by host, after PushRequestBreakInTarget. Sent by invader
	required uint32 unknown1 = 1; //935
	required uint32 playerid = 2; //Host playerid
	required string data = 3;
	required uint32 unknown2 = 4;
}

message RequestSendMessageToPlayers{ //Sent by host sometimes, after PushRequestAllowBreakInTarget
	required uint32 playerid = 1; //Invading playerid
	required PushRequestAllowBreakInTarget pushrequestallowbreakintarget = 2;
}

message PushRequestBreakInTarget{ //Received by host
  required uint32 unknown1 = 1; ///Same as PushRequestAllowBreakInTarget
  required uint32 playerid = 2; //Invading playerid
  required string steamid = 3;
  required uint32 unknown2 = 4; //Same as PushRequestAllowBreakInTarget
  required uint32 onlineareaidlower = 5;
  required uint32 onlineareaidupper = 6;
}

message RequestNotifyJoinMultiplay{ //Sent on creation of online session
  required Frpg2PlayerData.AllStatus allstatus = 1;
  required uint32 onlineareaidlower = 2;
  required uint32 onlineareaidupper = 3;
  required uint32 unknown2 = 4;
  required uint32 unknown3 = 5;
  repeated PartyMemberInfo partymemberinfo = 6;
}

message RequestNotifyLeaveMultiplay{ //Sent on leaving online session
	required Frpg2PlayerData.AllStatus allstatus = 1;
	required uint32 onlineareaidlower = 2;
	required uint32 onlineareaidupper = 3;
	required uint32 unknown2 = 4;
	required uint32 unknown3 = 5;
	required uint32 unknown4 = 6;
	repeated PartyMemberInfo partymemberinfo = 7;
}

message PartyMemberInfo{
	required uint32 playerid = 1;
	required uint32 charid = 2;
	required uint32 unknown2 = 3;
	required uint32 unknown4 = 4;
	required uint32 unknown5 = 5;
	required uint32 unknown6 = 6;
}